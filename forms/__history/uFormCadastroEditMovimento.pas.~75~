unit uFormCadastroEditMovimento;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.DBCtrls, Vcl.StdCtrls, Vcl.Mask;

type
  TformCadastroEditMovimento = class(TForm)
    FDQueryMovimentos: TFDQuery;
    dsCadastro: TDataSource;
    FDQueryGenerator: TFDQuery;
    edtCodigo: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    DBLookupContas: TDBLookupComboBox;
    Label3: TLabel;
    cbTipo: TComboBox;
    Label4: TLabel;
    Label5: TLabel;
    edtHistorico: TEdit;
    Label6: TLabel;
    btnSalvar: TButton;
    edtValor: TEdit;
    edtData: TMaskEdit;
    FDQueryContas: TFDQuery;
    procedure FormCreate(Sender: TObject);
    procedure btnSalvarClick(Sender: TObject);
    procedure DBLookupContasClick(Sender: TObject);
  private
    { Private declarations }
     procedure atualizaDbGrid;
  public
    { Public declarations }
     isEdit : boolean;
     function returnTipo(tipo : string) : string;

  end;


var
  formCadastroEditMovimento: TformCadastroEditMovimento;
  codConta : integer;


implementation

{$R *.dfm}

uses uDmDados, uLookup, uBiblioteca, uFormGeralMovimento;

procedure TformCadastroEditMovimento.atualizaDbGrid;
begin
    formCadastroMovimento.FDQueryCadastro.Open();
  formCadastroMovimento.FDQueryCadastro.close();
end;

procedure TformCadastroEditMovimento.btnSalvarClick(Sender: TObject);
begin
  if validateIsEmptyString(edtData.Text) and validateIsEmptyString(edtValor.Text) and (validateIsEmptyString(edtHistorico.Text)) and validateIsEmptyString(cbTipo.Text) and validateIsEmptyString(DBLookupContas.Text) then begin
    try
    with FDQueryMovimentos do begin
    if not isEdit then begin
      Close;
      SQL.Clear;
      SQL.Text := 'INSERT INTO MOVIMENTO (DATA,CONTA_ID,TIPO,VALOR,HISTORICO) VALUES (:DATA,:CONTA_ID,:TIPO,:VALOR,:HISTORICO)';
      ParamByName('DATA').AsDate := StrToDate(edtData.Text);
      ParamByName('CONTA_ID').AsInteger := codConta;
      ParamByName('TIPO').AsString := returnTipo(cbTipo.Text);
      ParamByName('HISTORICO').AsString := edtHistorico.Text;
      ParamByName('VALOR').AsFloat := strtofloat(edtValor.Text);
      ExecSQL;
      ShowMessage('Salvo com sucesso');
      end
      else begin
      Close;
      SQL.Clear;
      SQL.Text := 'UPDATE MOVIMENTO SET DATA = :DATA, CONTA_ID = :CONTA_ID, TIPO = :TIPO,HISTORICO = :HISTORICO,VALOR = :VALOR WHERE ID = :ID';
      ParamByName('ID').AsInteger := strtoint(edtCodigo.Text);
      ParamByName('DATA').AsDate := StrToDate(edtData.Text);
      ParamByName('CONTA_ID').AsInteger := codConta;
      ParamByName('TIPO').AsString := returnTipo(cbTipo.Text);
      ParamByName('HISTORICO').AsString := edtHistorico.Text;
      ParamByName('VALOR').AsFloat := strtofloat(edtValor.Text);
      ExecSQL;
       ShowMessage('Salvo com sucesso');
      end;
    end;
        atualizaDbGrid;


    except on e:exception do begin
      ShowMessage(e.Message);
    end;

    end;



  end

  else
  begin
    ShowMessage('Preencha todos os campos em negrito.');
  end;

end;

procedure TformCadastroEditMovimento.DBLookupContasClick(Sender: TObject);
  var  tipo: string;
begin
  FDQueryContas.Close;
  FDQueryContas.SQL.Clear;
  FDQueryContas.SQL.Text := 'SELECT id,tipo FROM CONTA WHERE nome = :nome';
  FDQueryContas.ParamByName('nome').AsString := DBLookupContas.Text;
  FDQueryContas.Open();
  tipo := FDQueryContas.Fields[1].AsString;
  if tipo = ('R') then begin
    cbTipo.Text := 'Entrada';
  end
  else
    cbTipo.Text := 'Saída';


  codConta := FDQueryContas.Fields[0].AsInteger;

end;

procedure TformCadastroEditMovimento.FormCreate(Sender: TObject);
var
  proximoCod: integer;
begin
if not isEdit then
begin
  with FDQueryGenerator do
  begin
   FDQueryGenerator.Close;
   FDQueryGenerator.SQL.Clear;
   FDQueryGenerator.SQL.Text := 'SELECT GEN_ID(GEN_MOVIMENTO_ID, 0) FROM RDB$DATABASE';
   FDQueryGenerator.Open();
   proximoCod := (FDQueryGenerator.Fields[0].AsInteger) + 1;
   edtCodigo.Text := IntToStr(proximoCod);
  end;
end


else
  begin

  end;
  dmLookup.FDQueryContas.Open();
  dmLookup.FDQueryContas.FetchAll;

end;

function TformCadastroEditMovimento.returnTipo(tipo: string): string;
begin
  if tipo = ('Entrada') then begin
    result := 'E';
  end
  else
    result := 'S';

end;

end.
